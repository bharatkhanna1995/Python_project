class Interpolate:

    def __init__(self):
        self.x_values=None
        self.fx_values=None
        self.polynomial=None

    def solve(self,L,M,method):
        if(method=="newton"):
            return (self.Newton(L,M))
        else:
            return (self.Lagrange(L,M))

    def Lagrange(self,L,M):                                                 
        
        self.x_values=L
        self.fx_values=M
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(self.x_values)                                                
        w=(-1*self.x_values[0],1)                                           
        for i in range(1,n):
            w=P.polymul(w,(-1*self.x_values[i],1))                          
        result=array([0.0 for i in range(len(w)-1)])                        
        derivative=P.polyder(w)                                             
        for i in range(n):
            result+=(P.polydiv(w,(-1*self.x_values[i],1))[0]*self.fx_values[i])/P.polyval(self.x_values[i],derivative)
        result=list(result)                                                 
        self.polynomial=""                                                  
        for i in range(len(result)-1,0,-1):                                 
            if(result[i]!=0):
                if(result[i]>0 and i!=(len(result)-1)):
                    self.polynomial+=" + "+str(result[i])+"x^"+str(i)+" "
                elif(result[i]>0 and i==(len(result)-1)):
                    self.polynomial+=str(result[i])+"x^"+str(i)+" "
                else:
                    self.polynomial+=" - "+str(-1*result[i])+"x^"+str(i)+" "
        if(result[0]!=0):
            self.polynomial+=" + "+str(result[0]) if result[0]>0 else " - "+str(-1*result[0])
        return (self.polynomial)                                            

    def Newton(self,L,M):                                                   

        self.x_values=L
        self.fx_values=M
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(self.x_values)                                                
        mat=[[0.0 for i in range(n)] for j in range(n)]                      
        for i in range(n):                                                  
            mat[i][0]=self.fx_values[i]
        for i in range(1,n):                                                
            for j in range(n-i):
                mat[j][i]=(mat[j+1][i-1]-mat[j][i-1])/(self.x_values[j+i]-self.x_values[j])
        result=array((mat[0][0],))                                          
        for i in range(1,n):
            prod=(-1*self.x_values[0],1)                                    
                                                                            
            for j in range(1,i):
                prod=P.polymul(prod,(-1*self.x_values[j],1))                    
            result=P.polyadd(result,array(prod)*mat[0][i])                  
        result=list(result)                                                 
        self.polynomial=""                                                  
        for i in range(len(result)-1,0,-1):                                 
            if(result[i]!=0):
                if(result[i]>0 and i!=(len(result)-1)):
                    self.polynomial+=" + "+str(result[i])+"x^"+str(i)+" "
                elif(result[i]>0 and i==(len(result)-1)):
                    self.polynomial+=str(result[i])+"x^"+str(i)+" "
                else:
                    self.polynomial+=" - "+str(-1*result[i])+"x^"+str(i)+" "
        if(result[0]!=0):
            self.polynomial+=" + "+str(result[0]) if result[0]>0 else " - "+str(-1*result[0])
        return (self.polynomial)                                            
